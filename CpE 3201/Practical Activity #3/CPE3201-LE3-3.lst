

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Feb 23 10:18:11 2023

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	dabs	1,0x7E,2
    15  0000                     	;# 
    16  0001                     	;# 
    17  0002                     	;# 
    18  0003                     	;# 
    19  0004                     	;# 
    20  0005                     	;# 
    21  0006                     	;# 
    22  0007                     	;# 
    23  0008                     	;# 
    24  0009                     	;# 
    25  000A                     	;# 
    26  000B                     	;# 
    27  000C                     	;# 
    28  000D                     	;# 
    29  000E                     	;# 
    30  000E                     	;# 
    31  000F                     	;# 
    32  0010                     	;# 
    33  0011                     	;# 
    34  0012                     	;# 
    35  0013                     	;# 
    36  0014                     	;# 
    37  0015                     	;# 
    38  0015                     	;# 
    39  0016                     	;# 
    40  0017                     	;# 
    41  0018                     	;# 
    42  0019                     	;# 
    43  001A                     	;# 
    44  001B                     	;# 
    45  001B                     	;# 
    46  001C                     	;# 
    47  001D                     	;# 
    48  001E                     	;# 
    49  001F                     	;# 
    50  0081                     	;# 
    51  0085                     	;# 
    52  0086                     	;# 
    53  0087                     	;# 
    54  0088                     	;# 
    55  0089                     	;# 
    56  008C                     	;# 
    57  008D                     	;# 
    58  008E                     	;# 
    59  0091                     	;# 
    60  0092                     	;# 
    61  0093                     	;# 
    62  0094                     	;# 
    63  0098                     	;# 
    64  0099                     	;# 
    65  009C                     	;# 
    66  009D                     	;# 
    67  009E                     	;# 
    68  009F                     	;# 
    69  010C                     	;# 
    70  010D                     	;# 
    71  010E                     	;# 
    72  010F                     	;# 
    73  018C                     	;# 
    74  018D                     	;# 
    75  0005                     _PORTA	set	5
    76  0007                     _PORTC	set	7
    77  0008                     _PORTD	set	8
    78  005F                     _GIE	set	95
    79  0059                     _INTF	set	89
    80  0030                     _RB0	set	48
    81  005D                     _T0IE	set	93
    82  005A                     _T0IF	set	90
    83  009F                     _ADCON1	set	159
    84  0081                     _OPTION_REG	set	129
    85  0085                     _TRISA	set	133
    86  0086                     _TRISB	set	134
    87  0087                     _TRISC	set	135
    88  0088                     _TRISD	set	136
    89                           
    90                           	psect	text0
    91  0000                     __ptext0:	
    92                           ; #config settings
    93                           
    94                           
    95                           ;psect for function _ISR
    96  0000                     
    97                           	psect	cinit
    98  0015                     start_initialization:	
    99  0015                     __initialization:	
   100                           
   101                           ; Clear objects allocated to BITCOMMON
   102  0015  01F6               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   103                           
   104                           ; Clear objects allocated to COMMON
   105  0016  01F7               	clrf	__pbssCOMMON& (0+127)
   106  0017  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   107  0018                     end_of_initialization:	
   108                           ;End of C runtime variable initialization code
   109                           
   110  0018                     __end_of__initialization:	
   111  0018  0183               	clrf	3
   112  0019  120A  118A  2883   	ljmp	_main	;jump to C main() function
   113                           
   114                           	psect	bitbssCOMMON
   115  03B0                     __pbitbssCOMMON:	
   116  03B0                     _count_flag:	
   117  03B0                     	ds	1
   118  03B1                     _myINTF:	
   119  03B1                     	ds	1
   120  03B2                     _myTMR0IF:	
   121  03B2                     	ds	1
   122                           
   123                           	psect	bssCOMMON
   124  0077                     __pbssCOMMON:	
   125  0077                     _VAL:	
   126  0077                     	ds	1
   127  0078                     _currentCount:	
   128  0078                     	ds	1
   129                           
   130                           	psect	cstackCOMMON
   131  0070                     __pcstackCOMMON:	
   132  0070                     ?_ISR:	
   133  0070                     ??_ISR:	
   134                           ; 0 bytes @ 0x0
   135                           
   136  0070                     ?_main:	
   137                           ; 0 bytes @ 0x0
   138                           
   139                           
   140                           ; 0 bytes @ 0x0
   141  0070                     	ds	5
   142  0075                     ??_delay:	
   143                           
   144                           ; 0 bytes @ 0x5
   145  0075                     	ds	1
   146                           
   147                           	psect	cstackBANK0
   148  0020                     __pcstackBANK0:	
   149  0020                     ?_delay:	
   150  0020                     delay@num:	
   151                           ; 0 bytes @ 0x0
   152                           
   153                           
   154                           ; 2 bytes @ 0x0
   155  0020                     	ds	2
   156  0022                     delay@flags:	
   157                           
   158                           ; 2 bytes @ 0x2
   159  0022                     	ds	2
   160  0024                     ??_main:	
   161                           
   162                           ; 0 bytes @ 0x4
   163  0024                     	ds	1
   164                           
   165                           	psect	maintext
   166  0083                     __pmaintext:	
   167 ;;
   168 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   169 ;;
   170 ;; *************** function _main *****************
   171 ;; Defined at:
   172 ;;		line 69 in file "D:\JinBus\CpE 3201\Practical Activity #3\LE3-3.c"
   173 ;; Parameters:    Size  Location     Type
   174 ;;		None
   175 ;; Auto vars:     Size  Location     Type
   176 ;;		None
   177 ;; Return value:  Size  Location     Type
   178 ;;		None               void
   179 ;; Registers used:
   180 ;;		wreg, status,2, status,0, pclath, cstack
   181 ;; Tracked objects:
   182 ;;		On entry : 17F/0
   183 ;;		On exit  : 0/0
   184 ;;		Unchanged: 0/0
   185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   186 ;;      Params:         0       0       0       0       0
   187 ;;      Locals:         0       0       0       0       0
   188 ;;      Temps:          0       1       0       0       0
   189 ;;      Totals:         0       1       0       0       0
   190 ;;Total ram usage:        1 bytes
   191 ;; Hardware stack levels required when called:    2
   192 ;; This function calls:
   193 ;;		_delay
   194 ;; This function is called by:
   195 ;;		Startup code after reset
   196 ;; This function uses a non-reentrant model
   197 ;;
   198                           
   199                           
   200                           ;psect for function _main
   201  0083                     _main:	
   202                           
   203                           ;LE3-3.c: 70: ADCON1 = 0x07;
   204                           
   205                           ;incstack = 0
   206                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   207  0083  3007               	movlw	7
   208  0084  1683               	bsf	3,5	;RP0=1, select bank1
   209  0085  1303               	bcf	3,6	;RP1=0, select bank1
   210  0086  009F               	movwf	31	;volatile
   211                           
   212                           ;LE3-3.c: 71: TRISA = 0x00;
   213  0087  0185               	clrf	5	;volatile
   214                           
   215                           ;LE3-3.c: 72: TRISB = 0xFF;
   216  0088  30FF               	movlw	255
   217  0089  0086               	movwf	6	;volatile
   218                           
   219                           ;LE3-3.c: 73: TRISC = 0x00;
   220  008A  0187               	clrf	7	;volatile
   221                           
   222                           ;LE3-3.c: 74: TRISD = 0xFF;
   223  008B  30FF               	movlw	255
   224  008C  0088               	movwf	8	;volatile
   225                           
   226                           ;LE3-3.c: 76: OPTION_REG = 0xC4;
   227  008D  30C4               	movlw	196
   228  008E  0081               	movwf	1	;volatile
   229                           
   230                           ;LE3-3.c: 80: T0IE = 1;
   231  008F  168B               	bsf	11,5	;volatile
   232                           
   233                           ;LE3-3.c: 81: T0IF = 0;
   234  0090  110B               	bcf	11,2	;volatile
   235                           
   236                           ;LE3-3.c: 82: GIE = 1;
   237  0091  178B               	bsf	11,7	;volatile
   238                           
   239                           ;LE3-3.c: 84: PORTA = 0x00;
   240  0092  1283               	bcf	3,5	;RP0=0, select bank0
   241  0093  1303               	bcf	3,6	;RP1=0, select bank0
   242  0094  0185               	clrf	5	;volatile
   243                           
   244                           ;LE3-3.c: 85: PORTC = 0x00;
   245  0095  0187               	clrf	7	;volatile
   246  0096                     l740:	
   247                           ;LE3-3.c: 87: while(1) {
   248                           
   249                           
   250                           ;LE3-3.c: 88: if(currentCount == 0x09) {
   251  0096  0878               	movf	_currentCount,w
   252  0097  3A09               	xorlw	9
   253  0098  1D03               	skipz
   254  0099  28A0               	goto	l746
   255                           
   256                           ;LE3-3.c: 89: PORTC = 0x09;
   257  009A  3009               	movlw	9
   258  009B  1283               	bcf	3,5	;RP0=0, select bank0
   259  009C  1303               	bcf	3,6	;RP1=0, select bank0
   260  009D  0087               	movwf	7	;volatile
   261                           
   262                           ;LE3-3.c: 90: currentCount = 0;
   263  009E  01F8               	clrf	_currentCount
   264                           
   265                           ;LE3-3.c: 91: }
   266  009F  28DF               	goto	l784
   267  00A0                     l746:	
   268                           
   269                           ;LE3-3.c: 92: else {
   270                           ;LE3-3.c: 93: if(currentCount == 0x00)
   271  00A0  08F8               	movf	_currentCount,f
   272  00A1  1D03               	skipz
   273  00A2  28A7               	goto	l750
   274                           
   275                           ;LE3-3.c: 94: PORTC = 0x00;
   276  00A3  1283               	bcf	3,5	;RP0=0, select bank0
   277  00A4  1303               	bcf	3,6	;RP1=0, select bank0
   278  00A5  0187               	clrf	7	;volatile
   279  00A6  28D9               	goto	l782
   280  00A7                     l750:	
   281                           
   282                           ;LE3-3.c: 95: else if(currentCount == 0x01)
   283  00A7  0878               	movf	_currentCount,w
   284  00A8  3A01               	xorlw	1
   285  00A9  1D03               	skipz
   286  00AA  28AD               	goto	l754
   287                           
   288                           ;LE3-3.c: 96: PORTC = 0x01;
   289  00AB  3001               	movlw	1
   290  00AC  28D6               	goto	L7
   291  00AD                     l754:	
   292                           
   293                           ;LE3-3.c: 97: else if(currentCount == 0x02)
   294  00AD  0878               	movf	_currentCount,w
   295  00AE  3A02               	xorlw	2
   296  00AF  1D03               	skipz
   297  00B0  28B3               	goto	l758
   298                           
   299                           ;LE3-3.c: 98: PORTC = 0x02;
   300  00B1  3002               	movlw	2
   301  00B2  28D6               	goto	L7
   302  00B3                     l758:	
   303                           
   304                           ;LE3-3.c: 99: else if(currentCount == 0x03)
   305  00B3  0878               	movf	_currentCount,w
   306  00B4  3A03               	xorlw	3
   307  00B5  1D03               	skipz
   308  00B6  28B9               	goto	l762
   309                           
   310                           ;LE3-3.c: 100: PORTC = 0x03;
   311  00B7  3003               	movlw	3
   312  00B8  28D6               	goto	L7
   313  00B9                     l762:	
   314                           
   315                           ;LE3-3.c: 101: else if(currentCount == 0x04)
   316  00B9  0878               	movf	_currentCount,w
   317  00BA  3A04               	xorlw	4
   318  00BB  1D03               	skipz
   319  00BC  28BF               	goto	l766
   320                           
   321                           ;LE3-3.c: 102: PORTC = 0x04;
   322  00BD  3004               	movlw	4
   323  00BE  28D6               	goto	L7
   324  00BF                     l766:	
   325                           
   326                           ;LE3-3.c: 103: else if(currentCount == 0x05)
   327  00BF  0878               	movf	_currentCount,w
   328  00C0  3A05               	xorlw	5
   329  00C1  1D03               	skipz
   330  00C2  28C5               	goto	l770
   331                           
   332                           ;LE3-3.c: 104: PORTC = 0x05;
   333  00C3  3005               	movlw	5
   334  00C4  28D6               	goto	L7
   335  00C5                     l770:	
   336                           
   337                           ;LE3-3.c: 105: else if(currentCount == 0x06)
   338  00C5  0878               	movf	_currentCount,w
   339  00C6  3A06               	xorlw	6
   340  00C7  1D03               	skipz
   341  00C8  28CB               	goto	l774
   342                           
   343                           ;LE3-3.c: 106: PORTC = 0x06;
   344  00C9  3006               	movlw	6
   345  00CA  28D6               	goto	L7
   346  00CB                     l774:	
   347                           
   348                           ;LE3-3.c: 107: else if(currentCount == 0x07)
   349  00CB  0878               	movf	_currentCount,w
   350  00CC  3A07               	xorlw	7
   351  00CD  1D03               	skipz
   352  00CE  28D1               	goto	l778
   353                           
   354                           ;LE3-3.c: 108: PORTC = 0x07;
   355  00CF  3007               	movlw	7
   356  00D0  28D6               	goto	L7
   357  00D1                     l778:	
   358                           
   359                           ;LE3-3.c: 109: else if(currentCount == 0x08)
   360  00D1  0878               	movf	_currentCount,w
   361  00D2  3A08               	xorlw	8
   362  00D3  1D03               	skipz
   363  00D4  28D9               	goto	l782
   364                           
   365                           ;LE3-3.c: 110: PORTC = 0x08;
   366  00D5  3008               	movlw	8
   367  00D6                     L7:	
   368  00D6  1283               	bcf	3,5	;RP0=0, select bank0
   369  00D7  1303               	bcf	3,6	;RP1=0, select bank0
   370  00D8  0087               	movwf	7	;volatile
   371  00D9                     l782:	
   372                           
   373                           ;LE3-3.c: 111: currentCount++;
   374  00D9  3001               	movlw	1
   375  00DA  1283               	bcf	3,5	;RP0=0, select bank0
   376  00DB  1303               	bcf	3,6	;RP1=0, select bank0
   377  00DC  00A4               	movwf	??_main
   378  00DD  0824               	movf	??_main,w
   379  00DE  07F8               	addwf	_currentCount,f
   380  00DF                     l784:	
   381                           
   382                           ;LE3-3.c: 112: }
   383                           ;LE3-3.c: 113: delay(10);
   384  00DF  300A               	movlw	10
   385  00E0  00A0               	movwf	delay@num
   386  00E1  3000               	movlw	0
   387  00E2  00A1               	movwf	delay@num+1
   388  00E3  120A  118A  20E9  120A  118A  	fcall	_delay
   389  00E8  2896               	goto	l740
   390  00E9                     __end_of_main:	
   391                           
   392                           	psect	text1
   393  00E9                     __ptext1:	
   394 ;; *************** function _delay *****************
   395 ;; Defined at:
   396 ;;		line 19 in file "D:\JinBus\CpE 3201\Practical Activity #3\LE3-3.c"
   397 ;; Parameters:    Size  Location     Type
   398 ;;  num             2    0[BANK0 ] int 
   399 ;; Auto vars:     Size  Location     Type
   400 ;;  flags           2    2[BANK0 ] int 
   401 ;; Return value:  Size  Location     Type
   402 ;;		None               void
   403 ;; Registers used:
   404 ;;		wreg, status,2
   405 ;; Tracked objects:
   406 ;;		On entry : 0/0
   407 ;;		On exit  : 0/0
   408 ;;		Unchanged: 0/0
   409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   410 ;;      Params:         0       2       0       0       0
   411 ;;      Locals:         0       2       0       0       0
   412 ;;      Temps:          1       0       0       0       0
   413 ;;      Totals:         1       4       0       0       0
   414 ;;Total ram usage:        5 bytes
   415 ;; Hardware stack levels used:    1
   416 ;; Hardware stack levels required when called:    1
   417 ;; This function calls:
   418 ;;		Nothing
   419 ;; This function is called by:
   420 ;;		_main
   421 ;; This function uses a non-reentrant model
   422 ;;
   423                           
   424                           
   425                           ;psect for function _delay
   426  00E9                     _delay:	
   427                           
   428                           ;LE3-3.c: 20: int flags = 0;
   429                           
   430                           ;incstack = 0
   431                           ; Regs used in _delay: [wreg+status,2]
   432  00E9  1283               	bcf	3,5	;RP0=0, select bank0
   433  00EA  1303               	bcf	3,6	;RP1=0, select bank0
   434  00EB  01A2               	clrf	delay@flags
   435  00EC  01A3               	clrf	delay@flags+1
   436  00ED                     l41:	
   437                           ;LE3-3.c: 21: while (flags < num) {
   438                           
   439  00ED  1283               	bcf	3,5	;RP0=0, select bank0
   440  00EE  1303               	bcf	3,6	;RP1=0, select bank0
   441  00EF  0823               	movf	delay@flags+1,w
   442  00F0  3A80               	xorlw	128
   443  00F1  00F5               	movwf	??_delay
   444  00F2  0821               	movf	delay@num+1,w
   445  00F3  3A80               	xorlw	128
   446  00F4  0275               	subwf	??_delay,w
   447  00F5  1D03               	skipz
   448  00F6  28F9               	goto	u395
   449  00F7  0820               	movf	delay@num,w
   450  00F8  0222               	subwf	delay@flags,w
   451  00F9                     u395:	
   452  00F9  1803               	btfsc	3,0
   453  00FA  0008               	return
   454                           
   455                           ;LE3-3.c: 22: if(count_flag) {
   456  00FB  1C76               	btfss	_count_flag/(0+8),_count_flag& (0+7)
   457  00FC  28ED               	goto	l41
   458                           
   459                           ;LE3-3.c: 23: count_flag = 0;
   460  00FD  1076               	bcf	_count_flag/(0+8),_count_flag& (0+7)
   461                           
   462                           ;LE3-3.c: 24: flags++;
   463  00FE  3001               	movlw	1
   464  00FF  1283               	bcf	3,5	;RP0=0, select bank0
   465  0100  1303               	bcf	3,6	;RP1=0, select bank0
   466  0101  07A2               	addwf	delay@flags,f
   467  0102  1803               	skipnc
   468  0103  0AA3               	incf	delay@flags+1,f
   469  0104  3000               	movlw	0
   470  0105  07A3               	addwf	delay@flags+1,f
   471  0106  28ED               	goto	l41
   472  0107                     __end_of_delay:	
   473                           
   474                           	psect	text2
   475  001C                     __ptext2:	
   476 ;; *************** function _ISR *****************
   477 ;; Defined at:
   478 ;;		line 29 in file "D:\JinBus\CpE 3201\Practical Activity #3\LE3-3.c"
   479 ;; Parameters:    Size  Location     Type
   480 ;;		None
   481 ;; Auto vars:     Size  Location     Type
   482 ;;		None
   483 ;; Return value:  Size  Location     Type
   484 ;;		None               void
   485 ;; Registers used:
   486 ;;		wreg, status,2, status,0
   487 ;; Tracked objects:
   488 ;;		On entry : 0/0
   489 ;;		On exit  : 0/0
   490 ;;		Unchanged: 0/0
   491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   492 ;;      Params:         0       0       0       0       0
   493 ;;      Locals:         0       0       0       0       0
   494 ;;      Temps:          5       0       0       0       0
   495 ;;      Totals:         5       0       0       0       0
   496 ;;Total ram usage:        5 bytes
   497 ;; Hardware stack levels used:    1
   498 ;; This function calls:
   499 ;;		Nothing
   500 ;; This function is called by:
   501 ;;		Interrupt level 1
   502 ;; This function uses a non-reentrant model
   503 ;;
   504                           
   505                           
   506                           ;psect for function _ISR
   507  001C                     _ISR:	
   508                           
   509                           ;LE3-3.c: 30: GIE = 0;
   510  001C  138B               	bcf	11,7	;volatile
   511                           
   512                           ;LE3-3.c: 31: if (INTF) {
   513  001D  1C8B               	btfss	11,1	;volatile
   514  001E  2823               	goto	i1l48
   515                           
   516                           ;LE3-3.c: 32: INTF = 0;
   517  001F  108B               	bcf	11,1	;volatile
   518                           
   519                           ;LE3-3.c: 35: myINTF ^= 1;
   520  0020  3002               	movlw	(0+1) shl (_myINTF& (0+7))
   521  0021  06F6               	xorwf	_myINTF/(0+8),f
   522                           
   523                           ;LE3-3.c: 36: }
   524  0022  2877               	goto	i1l586
   525  0023                     i1l48:	
   526                           
   527                           ;LE3-3.c: 37: else if(T0IF) {
   528  0023  1D0B               	btfss	11,2	;volatile
   529  0024  2877               	goto	i1l586
   530                           
   531                           ;LE3-3.c: 38: T0IF = 0;
   532  0025  110B               	bcf	11,2	;volatile
   533                           
   534                           ;LE3-3.c: 40: if(RB0 == 1) {
   535  0026  1C06               	btfss	6,0	;volatile
   536  0027  2876               	goto	i1l584
   537                           
   538                           ;LE3-3.c: 41: VAL = PORTD & 0x0F;
   539  0028  0808               	movf	8,w	;volatile
   540  0029  390F               	andlw	15
   541  002A  00F0               	movwf	??_ISR
   542  002B  0870               	movf	??_ISR,w
   543  002C  00F7               	movwf	_VAL
   544                           
   545                           ;LE3-3.c: 42: if(VAL == 0x00)
   546  002D  08F7               	movf	_VAL,f
   547  002E  1D03               	skipz
   548  002F  2832               	goto	i1l564
   549                           
   550                           ;LE3-3.c: 43: currentCount = 0x01;
   551  0030  01F8               	clrf	_currentCount
   552  0031  0AF8               	incf	_currentCount,f
   553  0032                     i1l564:	
   554                           
   555                           ;LE3-3.c: 44: if(VAL == 0x01)
   556  0032  0877               	movf	_VAL,w
   557  0033  3A01               	xorlw	1
   558  0034  1D03               	skipz
   559  0035  283A               	goto	i1l53
   560                           
   561                           ;LE3-3.c: 45: currentCount = 0x02;
   562  0036  3002               	movlw	2
   563  0037  00F0               	movwf	??_ISR
   564  0038  0870               	movf	??_ISR,w
   565  0039  00F8               	movwf	_currentCount
   566  003A                     i1l53:	
   567                           
   568                           ;LE3-3.c: 46: if(VAL == 0x02)
   569  003A  0877               	movf	_VAL,w
   570  003B  3A02               	xorlw	2
   571  003C  1D03               	skipz
   572  003D  2842               	goto	i1l54
   573                           
   574                           ;LE3-3.c: 47: currentCount = 0x03;
   575  003E  3003               	movlw	3
   576  003F  00F0               	movwf	??_ISR
   577  0040  0870               	movf	??_ISR,w
   578  0041  00F8               	movwf	_currentCount
   579  0042                     i1l54:	
   580                           
   581                           ;LE3-3.c: 48: if(VAL == 0x04)
   582  0042  0877               	movf	_VAL,w
   583  0043  3A04               	xorlw	4
   584  0044  1D03               	skipz
   585  0045  284A               	goto	i1l55
   586                           
   587                           ;LE3-3.c: 49: currentCount = 0x04;
   588  0046  3004               	movlw	4
   589  0047  00F0               	movwf	??_ISR
   590  0048  0870               	movf	??_ISR,w
   591  0049  00F8               	movwf	_currentCount
   592  004A                     i1l55:	
   593                           
   594                           ;LE3-3.c: 50: if(VAL == 0x05)
   595  004A  0877               	movf	_VAL,w
   596  004B  3A05               	xorlw	5
   597  004C  1D03               	skipz
   598  004D  2852               	goto	i1l56
   599                           
   600                           ;LE3-3.c: 51: currentCount = 0x05;
   601  004E  3005               	movlw	5
   602  004F  00F0               	movwf	??_ISR
   603  0050  0870               	movf	??_ISR,w
   604  0051  00F8               	movwf	_currentCount
   605  0052                     i1l56:	
   606                           
   607                           ;LE3-3.c: 52: if(VAL == 0x06)
   608  0052  0877               	movf	_VAL,w
   609  0053  3A06               	xorlw	6
   610  0054  1D03               	skipz
   611  0055  285A               	goto	i1l57
   612                           
   613                           ;LE3-3.c: 53: currentCount = 0x06;
   614  0056  3006               	movlw	6
   615  0057  00F0               	movwf	??_ISR
   616  0058  0870               	movf	??_ISR,w
   617  0059  00F8               	movwf	_currentCount
   618  005A                     i1l57:	
   619                           
   620                           ;LE3-3.c: 54: if(VAL == 0x08)
   621  005A  0877               	movf	_VAL,w
   622  005B  3A08               	xorlw	8
   623  005C  1D03               	skipz
   624  005D  2862               	goto	i1l58
   625                           
   626                           ;LE3-3.c: 55: currentCount = 0x07;
   627  005E  3007               	movlw	7
   628  005F  00F0               	movwf	??_ISR
   629  0060  0870               	movf	??_ISR,w
   630  0061  00F8               	movwf	_currentCount
   631  0062                     i1l58:	
   632                           
   633                           ;LE3-3.c: 56: if(VAL == 0x09)
   634  0062  0877               	movf	_VAL,w
   635  0063  3A09               	xorlw	9
   636  0064  1D03               	skipz
   637  0065  286A               	goto	i1l59
   638                           
   639                           ;LE3-3.c: 57: currentCount = 0x08;
   640  0066  3008               	movlw	8
   641  0067  00F0               	movwf	??_ISR
   642  0068  0870               	movf	??_ISR,w
   643  0069  00F8               	movwf	_currentCount
   644  006A                     i1l59:	
   645                           
   646                           ;LE3-3.c: 58: if(VAL == 0x0A)
   647  006A  0877               	movf	_VAL,w
   648  006B  3A0A               	xorlw	10
   649  006C  1D03               	skipz
   650  006D  2872               	goto	i1l60
   651                           
   652                           ;LE3-3.c: 59: currentCount = 0x09;
   653  006E  3009               	movlw	9
   654  006F  00F0               	movwf	??_ISR
   655  0070  0870               	movf	??_ISR,w
   656  0071  00F8               	movwf	_currentCount
   657  0072                     i1l60:	
   658                           
   659                           ;LE3-3.c: 60: if(VAL == 0x0D)
   660  0072  0877               	movf	_VAL,w
   661  0073  3A0D               	xorlw	13
   662  0074  1903               	btfsc	3,2
   663                           
   664                           ;LE3-3.c: 61: currentCount = 0x00;
   665  0075  01F8               	clrf	_currentCount
   666  0076                     i1l584:	
   667                           
   668                           ;LE3-3.c: 62: }
   669                           ;LE3-3.c: 63: count_flag = 1;
   670  0076  1476               	bsf	_count_flag/(0+8),_count_flag& (0+7)
   671  0077                     i1l586:	
   672                           
   673                           ;LE3-3.c: 65: }
   674                           ;LE3-3.c: 66: GIE = 1;
   675  0077  178B               	bsf	11,7	;volatile
   676  0078  0874               	movf	??_ISR+4,w
   677  0079  00FF               	movwf	127
   678  007A  0873               	movf	??_ISR+3,w
   679  007B  008A               	movwf	10
   680  007C  0872               	movf	??_ISR+2,w
   681  007D  0084               	movwf	4
   682  007E  0E71               	swapf	(??_ISR+1)^(0+-128),w
   683  007F  0083               	movwf	3
   684  0080  0EFE               	swapf	126,f
   685  0081  0E7E               	swapf	126,w
   686  0082  0009               	retfie
   687  0083                     __end_of_ISR:	
   688  007E                     btemp	set	126	;btemp
   689  007E                     wtemp	set	126
   690  007E                     wtemp0	set	126
   691  0080                     wtemp1	set	128
   692  0082                     wtemp2	set	130
   693  0084                     wtemp3	set	132
   694  0086                     wtemp4	set	134
   695  0088                     wtemp5	set	136
   696  007F                     wtemp6	set	127
   697  007E                     ttemp	set	126
   698  007E                     ttemp0	set	126
   699  0081                     ttemp1	set	129
   700  0084                     ttemp2	set	132
   701  0087                     ttemp3	set	135
   702  007F                     ttemp4	set	127
   703  007E                     ltemp	set	126
   704  007E                     ltemp0	set	126
   705  0082                     ltemp1	set	130
   706  0086                     ltemp2	set	134
   707  0080                     ltemp3	set	128
   708                           
   709                           	psect	intentry
   710  0004                     __pintentry:	
   711                           ;incstack = 0
   712                           ; Regs used in _ISR: [wreg+status,2+status,0]
   713                           
   714  0004                     interrupt_function:	
   715  007E                     saved_w	set	btemp
   716  0004  00FE               	movwf	btemp
   717  0005  0E03               	swapf	3,w
   718  0006  00F1               	movwf	??_ISR+1
   719  0007  0804               	movf	4,w
   720  0008  00F2               	movwf	??_ISR+2
   721  0009  080A               	movf	10,w
   722  000A  00F3               	movwf	??_ISR+3
   723  000B  1283               	bcf	3,5	;RP0=0, select bank0
   724  000C  1303               	bcf	3,6	;RP1=0, select bank0
   725  000D  087F               	movf	btemp+1,w
   726  000E  00F4               	movwf	??_ISR+4
   727  000F  120A  118A  281C   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       9
    BANK0            80      5       5
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_delay

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_delay

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     133
                                              4 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _delay                                                5     3      2     133
                                              5 COMMON     1     1      0
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       E       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      5       5       5        6.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       E      12        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Feb 23 10:18:11 2023

            __CFG_CP$OFF 0000                       l41 00ED                      l740 0096  
                    l750 00A7                      l770 00C5                      l762 00B9  
                    l754 00AD                      l746 00A0                      l774 00CB  
                    l766 00BF                      l758 00B3                      l782 00D9  
                    l784 00DF                      l778 00D1                      _GIE 005F  
                    _RB0 0030             __CFG_CPD$OFF 0000                      _ISR 001C  
                    u395 00F9                      _VAL 0077                      fsr0 0004  
           __CFG_FOSC$XT 0000             __CFG_LVP$OFF 0000                     ?_ISR 0070  
                   _T0IE 005D                     _T0IF 005A                     _INTF 0059  
                   i1l60 0072                     i1l53 003A                     i1l54 0042  
                   i1l55 004A                     i1l56 0052                     i1l48 0023  
                   i1l57 005A                     i1l58 0062                     i1l59 006A  
           __CFG_WRT$OFF 0000                     _main 0083                     btemp 007E  
          __CFG_BOREN$ON 0000                     ltemp 007E                     start 0012  
                   ttemp 007E                     wtemp 007E                    ??_ISR 0070  
                  ?_main 0070            __CFG_WDTE$OFF 0000                    i1l564 0032  
                  i1l584 0076                    i1l586 0077                    _PORTA 0005  
                  _PORTC 0007                    _PORTD 0008                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _TRISD 0088  
          __CFG_PWRTE$ON 0000                    _delay 00E9           __pbitbssCOMMON 03B0  
                  pclath 000A                    ltemp0 007E                    ltemp1 0082  
                  ltemp2 0086                    ltemp3 0080                    ttemp0 007E  
                  ttemp1 0081                    ttemp2 0084                    ttemp3 0087  
                  ttemp4 007F                    status 0003                    wtemp0 007E  
                  wtemp1 0080                    wtemp2 0082                    wtemp3 0084  
                  wtemp4 0086                    wtemp5 0088                    wtemp6 007F  
        __initialization 0015             __end_of_main 00E9                   ??_main 0024  
                 ?_delay 0020                   _ADCON1 009F                   _myINTF 03B1  
                 saved_w 007E  __end_of__initialization 0018           __pcstackCOMMON 0070  
          __end_of_delay 0107                  ??_delay 0075               __pmaintext 0083  
             __pintentry 0004               _count_flag 03B0                  __ptext0 0000  
                __ptext1 00E9                  __ptext2 001C             __size_of_ISR 0067  
             delay@flags 0022     end_of_initialization 0018      start_initialization 0015  
            __end_of_ISR 0083              __pbssCOMMON 0077                ___latbits 0002  
          __pcstackBANK0 0020             _currentCount 0078           __size_of_delay 001E  
      interrupt_function 0004                 _myTMR0IF 03B2            __size_of_main 0066  
               delay@num 0020                 intlevel1 0000               _OPTION_REG 0081  
