

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Mar 08 00:02:24 2023

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	dabs	1,0x7E,2
    10  0000                     	;# 
    11  0001                     	;# 
    12  0002                     	;# 
    13  0003                     	;# 
    14  0004                     	;# 
    15  0005                     	;# 
    16  0006                     	;# 
    17  0007                     	;# 
    18  0008                     	;# 
    19  0009                     	;# 
    20  000A                     	;# 
    21  000B                     	;# 
    22  000C                     	;# 
    23  000D                     	;# 
    24  000E                     	;# 
    25  000E                     	;# 
    26  000F                     	;# 
    27  0010                     	;# 
    28  0011                     	;# 
    29  0012                     	;# 
    30  0013                     	;# 
    31  0014                     	;# 
    32  0015                     	;# 
    33  0015                     	;# 
    34  0016                     	;# 
    35  0017                     	;# 
    36  0018                     	;# 
    37  0019                     	;# 
    38  001A                     	;# 
    39  001B                     	;# 
    40  001B                     	;# 
    41  001C                     	;# 
    42  001D                     	;# 
    43  001E                     	;# 
    44  001F                     	;# 
    45  0081                     	;# 
    46  0085                     	;# 
    47  0086                     	;# 
    48  0087                     	;# 
    49  0088                     	;# 
    50  0089                     	;# 
    51  008C                     	;# 
    52  008D                     	;# 
    53  008E                     	;# 
    54  0091                     	;# 
    55  0092                     	;# 
    56  0093                     	;# 
    57  0094                     	;# 
    58  0098                     	;# 
    59  0099                     	;# 
    60  009C                     	;# 
    61  009D                     	;# 
    62  009E                     	;# 
    63  009F                     	;# 
    64  010C                     	;# 
    65  010D                     	;# 
    66  010E                     	;# 
    67  010F                     	;# 
    68  018C                     	;# 
    69  018D                     	;# 
    70  0017                     _CCP1CON	set	23
    71  0015                     _CCPR1L	set	21
    72  0012                     _T2CON	set	18
    73  0031                     _RB1	set	49
    74  0032                     _RB2	set	50
    75  003A                     _RC2	set	58
    76  0092                     _PR2	set	146
    77  0086                     _TRISB	set	134
    78  0087                     _TRISC	set	135
    79                           
    80                           	psect	text0
    81  0000                     __ptext0:	
    82                           ; #config settings
    83                           
    84                           
    85                           ;psect for function _delay
    86  0000                     
    87                           	psect	cinit
    88  07FC                     start_initialization:	
    89  07FC                     __initialization:	
    90  07FC                     end_of_initialization:	
    91                           ;End of C runtime variable initialization code
    92                           
    93  07FC                     __end_of__initialization:	
    94  07FC  0183               	clrf	3
    95  07FD  120A  118A  2F18   	ljmp	_main	;jump to C main() function
    96                           
    97                           	psect	cstackCOMMON
    98  0070                     __pcstackCOMMON:	
    99  0070                     ?_delay:	
   100  0070                     ?_main:	
   101                           ; 0 bytes @ 0x0
   102                           
   103  0070                     delay@cnt:	
   104                           ; 0 bytes @ 0x0
   105                           
   106                           
   107                           ; 2 bytes @ 0x0
   108  0070                     	ds	2
   109  0072                     ??_delay:	
   110  0072                     delay@i:	
   111                           ; 0 bytes @ 0x2
   112                           
   113                           
   114                           ; 2 bytes @ 0x2
   115  0072                     	ds	2
   116  0074                     delay@j:	
   117                           
   118                           ; 2 bytes @ 0x4
   119  0074                     	ds	2
   120  0076                     ??_main:	
   121  0076                     main@duty:	
   122                           ; 0 bytes @ 0x6
   123                           
   124                           
   125                           ; 2 bytes @ 0x6
   126  0076                     	ds	2
   127  0078                     main@freq:	
   128                           
   129                           ; 2 bytes @ 0x8
   130  0078                     	ds	2
   131                           
   132                           	psect	maintext
   133  0718                     __pmaintext:	
   134 ;;
   135 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   136 ;;
   137 ;; *************** function _main *****************
   138 ;; Defined at:
   139 ;;		line 20 in file "D:\JinBus\CpE 3201\Practical Activity #4\CpE 3201-LE4-7\LE4-7.c"
   140 ;; Parameters:    Size  Location     Type
   141 ;;		None
   142 ;; Auto vars:     Size  Location     Type
   143 ;;  freq            2    8[COMMON] int 
   144 ;;  duty            2    6[COMMON] int 
   145 ;; Return value:  Size  Location     Type
   146 ;;		None               void
   147 ;; Registers used:
   148 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   149 ;; Tracked objects:
   150 ;;		On entry : 17F/0
   151 ;;		On exit  : 0/0
   152 ;;		Unchanged: 0/0
   153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   154 ;;      Params:         0       0       0       0       0
   155 ;;      Locals:         4       0       0       0       0
   156 ;;      Temps:          0       0       0       0       0
   157 ;;      Totals:         4       0       0       0       0
   158 ;;Total ram usage:        4 bytes
   159 ;; Hardware stack levels required when called:    1
   160 ;; This function calls:
   161 ;;		_delay
   162 ;; This function is called by:
   163 ;;		Startup code after reset
   164 ;; This function uses a non-reentrant model
   165 ;;
   166                           
   167                           
   168                           ;psect for function _main
   169  0718                     _main:	
   170                           
   171                           ;LE4-7.c: 21: TRISB = 0xFF;
   172                           
   173                           ;incstack = 0
   174                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   175  0718  30FF               	movlw	255
   176  0719  1683               	bsf	3,5	;RP0=1, select bank1
   177  071A  1303               	bcf	3,6	;RP1=0, select bank1
   178  071B  0086               	movwf	6	;volatile
   179                           
   180                           ;LE4-7.c: 24: PR2 = 0x7C;
   181  071C  307C               	movlw	124
   182  071D  0092               	movwf	18	;volatile
   183                           
   184                           ;LE4-7.c: 25: CCPR1L = 0x57;
   185  071E  3057               	movlw	87
   186  071F  1283               	bcf	3,5	;RP0=0, select bank0
   187  0720  1303               	bcf	3,6	;RP1=0, select bank0
   188  0721  0095               	movwf	21	;volatile
   189                           
   190                           ;LE4-7.c: 26: CCP1CON = 0x2C;
   191  0722  302C               	movlw	44
   192  0723  0097               	movwf	23	;volatile
   193                           
   194                           ;LE4-7.c: 27: TRISC = 0x00;
   195  0724  1683               	bsf	3,5	;RP0=1, select bank1
   196  0725  1303               	bcf	3,6	;RP1=0, select bank1
   197  0726  0187               	clrf	7	;volatile
   198                           
   199                           ;LE4-7.c: 28: RC2 = 0;
   200  0727  1283               	bcf	3,5	;RP0=0, select bank0
   201  0728  1303               	bcf	3,6	;RP1=0, select bank0
   202  0729  1107               	bcf	7,2	;volatile
   203                           
   204                           ;LE4-7.c: 29: T2CON = 0x06;
   205  072A  3006               	movlw	6
   206  072B  0092               	movwf	18	;volatile
   207                           
   208                           ;LE4-7.c: 31: int freq = 1;
   209  072C  3001               	movlw	1
   210  072D  00F8               	movwf	main@freq
   211  072E  3000               	movlw	0
   212  072F  00F9               	movwf	main@freq+1
   213                           
   214                           ;LE4-7.c: 32: int duty = 1;
   215  0730  3001               	movlw	1
   216  0731  00F6               	movwf	main@duty
   217  0732  3000               	movlw	0
   218  0733  00F7               	movwf	main@duty+1
   219  0734                     l556:	
   220                           ;LE4-7.c: 34: for(;;) {
   221                           
   222                           
   223                           ;LE4-7.c: 35: delay(500);
   224  0734  30F4               	movlw	244
   225  0735  00F0               	movwf	delay@cnt
   226  0736  3001               	movlw	1
   227  0737  00F1               	movwf	delay@cnt+1
   228  0738  120A  118A  26E9  120A  118A  	fcall	_delay
   229                           
   230                           ;LE4-7.c: 36: if(RB1 == 1) {
   231  073D  1283               	bcf	3,5	;RP0=0, select bank0
   232  073E  1303               	bcf	3,6	;RP1=0, select bank0
   233  073F  1C86               	btfss	6,1	;volatile
   234  0740  2F6B               	goto	l29
   235                           
   236                           ;LE4-7.c: 37: if(freq == 3)
   237  0741  3003               	movlw	3
   238  0742  0678               	xorwf	main@freq,w
   239  0743  0479               	iorwf	main@freq+1,w
   240  0744  1D03               	skipz
   241  0745  2F4B               	goto	l564
   242                           
   243                           ;LE4-7.c: 38: freq = 1;
   244  0746  3001               	movlw	1
   245  0747  00F8               	movwf	main@freq
   246  0748  3000               	movlw	0
   247  0749  00F9               	movwf	main@freq+1
   248  074A  2F5B               	goto	l574
   249  074B                     l564:	
   250                           
   251                           ;LE4-7.c: 39: else
   252                           ;LE4-7.c: 40: freq++;
   253  074B  3001               	movlw	1
   254  074C  07F8               	addwf	main@freq,f
   255  074D  1803               	skipnc
   256  074E  0AF9               	incf	main@freq+1,f
   257  074F  3000               	movlw	0
   258  0750  07F9               	addwf	main@freq+1,f
   259                           
   260                           ;LE4-7.c: 41: switch(freq) {
   261  0751  2F5B               	goto	l574
   262  0752                     l566:	
   263                           ;LE4-7.c: 42: case 1: PR2 = 0x1869; break;
   264                           
   265  0752  3069               	movlw	105
   266  0753  2F57               	goto	L2
   267  0754                     l568:	
   268                           ;LE4-7.c: 43: case 2: PR2 = 0x270; break;
   269                           
   270  0754  3070               	movlw	112
   271  0755  2F57               	goto	L2
   272  0756                     l570:	
   273                           ;LE4-7.c: 44: case 3: PR2 = 0x3E; break;
   274                           
   275  0756  303E               	movlw	62
   276  0757                     L2:	
   277  0757  1683               	bsf	3,5	;RP0=1, select bank1
   278  0758  1303               	bcf	3,6	;RP1=0, select bank1
   279  0759  0092               	movwf	18	;volatile
   280                           
   281                           ;LE4-7.c: 45: }
   282  075A  2F6B               	goto	l29
   283  075B                     l574:	
   284                           
   285                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   286                           ; Switch size 1, requested type "space"
   287                           ; Number of cases is 1, Range of values is 0 to 0
   288                           ; switch strategies available:
   289                           ; Name         Instructions Cycles
   290                           ; simple_byte            4     3 (average)
   291                           ; direct_byte           11     8 (fixed)
   292                           ; jumptable            260     6 (fixed)
   293                           ;	Chosen strategy is simple_byte
   294  075B  0879               	movf	main@freq+1,w
   295  075C  3A00               	xorlw	0	; case 0
   296  075D  1903               	skipnz
   297  075E  2F60               	goto	l778
   298  075F  2F6B               	goto	l29
   299  0760                     l778:	
   300                           
   301                           ; Switch size 1, requested type "space"
   302                           ; Number of cases is 3, Range of values is 1 to 3
   303                           ; switch strategies available:
   304                           ; Name         Instructions Cycles
   305                           ; simple_byte           10     6 (average)
   306                           ; direct_byte           20    11 (fixed)
   307                           ; jumptable            263     9 (fixed)
   308                           ;	Chosen strategy is simple_byte
   309  0760  0878               	movf	main@freq,w
   310  0761  3A01               	xorlw	1	; case 1
   311  0762  1903               	skipnz
   312  0763  2F52               	goto	l566
   313  0764  3A03               	xorlw	3	; case 2
   314  0765  1903               	skipnz
   315  0766  2F54               	goto	l568
   316  0767  3A01               	xorlw	1	; case 3
   317  0768  1903               	skipnz
   318  0769  2F56               	goto	l570
   319  076A  2F6B               	goto	l29
   320  076B                     l29:	
   321                           
   322                           ;LE4-7.c: 46: }
   323                           ;LE4-7.c: 47: if(RB2 == 1) {
   324  076B  1283               	bcf	3,5	;RP0=0, select bank0
   325  076C  1D06               	btfss	6,2	;volatile
   326  076D  2F34               	goto	l556
   327                           
   328                           ;LE4-7.c: 48: if(duty == 5)
   329  076E  3005               	movlw	5
   330  076F  0676               	xorwf	main@duty,w
   331  0770  0477               	iorwf	main@duty+1,w
   332  0771  1D03               	skipz
   333  0772  2F78               	goto	l580
   334                           
   335                           ;LE4-7.c: 49: duty = 1;
   336  0773  3001               	movlw	1
   337  0774  00F6               	movwf	main@duty
   338  0775  3000               	movlw	0
   339  0776  00F7               	movwf	main@duty+1
   340  0777  2F7E               	goto	l39
   341  0778                     l580:	
   342                           
   343                           ;LE4-7.c: 50: else
   344                           ;LE4-7.c: 51: duty++;
   345  0778  3001               	movlw	1
   346  0779  07F6               	addwf	main@duty,f
   347  077A  1803               	skipnc
   348  077B  0AF7               	incf	main@duty+1,f
   349  077C  3000               	movlw	0
   350  077D  07F7               	addwf	main@duty+1,f
   351  077E                     l39:	
   352                           
   353                           ;LE4-7.c: 53: if(freq == 1) {
   354  077E  3001               	movlw	1
   355  077F  0678               	xorwf	main@freq,w
   356  0780  0479               	iorwf	main@freq+1,w
   357  0781  1903               	btfsc	3,2
   358  0782  2F8E               	goto	l596
   359  0783  2FA5               	goto	l598
   360  0784                     l584:	
   361                           ;LE4-7.c: 55: case 1: CCPR1L = 0x71; CCP1CON = 0x0C; break;
   362                           
   363                           ;LE4-7.c: 54: switch(duty) {
   364                           
   365  0784  3071               	movlw	113
   366  0785  2FDD               	goto	L23
   367  0786                     l586:	
   368                           ;LE4-7.c: 56: case 2: CCPR1L = 0x1A; CCP1CON = 0x2C; break;
   369                           
   370  0786  301A               	movlw	26
   371  0787  2FE1               	goto	L18
   372  0788                     l588:	
   373                           ;LE4-7.c: 57: case 3: CCPR1L = 0x35; CCP1CON = 0x0C; break;
   374                           
   375  0788  3035               	movlw	53
   376  0789  2FDD               	goto	L23
   377  078A                     l590:	
   378                           ;LE4-7.c: 58: case 4: CCPR1L = 0x4F; CCP1CON = 0x2C; break;
   379                           
   380  078A  304F               	movlw	79
   381  078B  2FE1               	goto	L18
   382  078C                     l592:	
   383                           ;LE4-7.c: 59: case 5: CCPR1L = 0x31; CCP1CON = 0x2C; break;
   384                           
   385  078C  3031               	movlw	49
   386  078D  2FE1               	goto	L18
   387  078E                     l596:	
   388                           ;LE4-7.c: 60: }
   389                           
   390                           
   391                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   392                           ; Switch size 1, requested type "space"
   393                           ; Number of cases is 1, Range of values is 0 to 0
   394                           ; switch strategies available:
   395                           ; Name         Instructions Cycles
   396                           ; simple_byte            4     3 (average)
   397                           ; direct_byte           11     8 (fixed)
   398                           ; jumptable            260     6 (fixed)
   399                           ;	Chosen strategy is simple_byte
   400  078E  0877               	movf	main@duty+1,w
   401  078F  3A00               	xorlw	0	; case 0
   402  0790  1903               	skipnz
   403  0791  2F93               	goto	l780
   404  0792  2F34               	goto	l556
   405  0793                     l780:	
   406                           
   407                           ; Switch size 1, requested type "space"
   408                           ; Number of cases is 5, Range of values is 1 to 5
   409                           ; switch strategies available:
   410                           ; Name         Instructions Cycles
   411                           ; simple_byte           16     9 (average)
   412                           ; direct_byte           26    11 (fixed)
   413                           ; jumptable            263     9 (fixed)
   414                           ;	Chosen strategy is simple_byte
   415  0793  0876               	movf	main@duty,w
   416  0794  3A01               	xorlw	1	; case 1
   417  0795  1903               	skipnz
   418  0796  2F84               	goto	l584
   419  0797  3A03               	xorlw	3	; case 2
   420  0798  1903               	skipnz
   421  0799  2F86               	goto	l586
   422  079A  3A01               	xorlw	1	; case 3
   423  079B  1903               	skipnz
   424  079C  2F88               	goto	l588
   425  079D  3A07               	xorlw	7	; case 4
   426  079E  1903               	skipnz
   427  079F  2F8A               	goto	l590
   428  07A0  3A01               	xorlw	1	; case 5
   429  07A1  1903               	skipnz
   430  07A2  2F8C               	goto	l592
   431  07A3  2F34               	goto	l556
   432                           
   433                           ;LE4-7.c: 61: }
   434  07A4  2F34               	goto	l556
   435  07A5                     l598:	
   436                           
   437                           ;LE4-7.c: 62: else if (freq == 2) {
   438  07A5  3002               	movlw	2
   439  07A6  0678               	xorwf	main@freq,w
   440  07A7  0479               	iorwf	main@freq+1,w
   441  07A8  1903               	btfsc	3,2
   442  07A9  2FB5               	goto	l614
   443  07AA  2FCC               	goto	l616
   444  07AB                     l602:	
   445                           ;LE4-7.c: 64: case 1: CCPR1L = 0x3E; CCP1CON = 0x2C; break;
   446                           
   447                           ;LE4-7.c: 63: switch(duty) {
   448                           
   449  07AB  303E               	movlw	62
   450  07AC  2FE1               	goto	L18
   451  07AD                     l604:	
   452                           ;LE4-7.c: 65: case 2: CCPR1L = 0x9C; CCP1CON = 0x1C; break;
   453                           
   454  07AD  309C               	movlw	156
   455  07AE  2FD9               	goto	L21
   456  07AF                     l606:	
   457                           ;LE4-7.c: 66: case 3: CCPR1L = 0x38; CCP1CON = 0x2C; break;
   458                           
   459  07AF  3038               	movlw	56
   460  07B0  2FE1               	goto	L18
   461  07B1                     l608:	
   462                           ;LE4-7.c: 67: case 4: CCPR1L = 0xD4; CCP1CON = 0x3C; break;
   463                           
   464  07B1  30D4               	movlw	212
   465  07B2  2FD5               	goto	L20
   466  07B3                     l610:	
   467                           ;LE4-7.c: 68: case 5: CCPR1L = 0x51; CCP1CON = 0x3C; break;
   468                           
   469  07B3  3051               	movlw	81
   470  07B4  2FD5               	goto	L20
   471  07B5                     l614:	
   472                           ;LE4-7.c: 69: }
   473                           
   474                           
   475                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   476                           ; Switch size 1, requested type "space"
   477                           ; Number of cases is 1, Range of values is 0 to 0
   478                           ; switch strategies available:
   479                           ; Name         Instructions Cycles
   480                           ; simple_byte            4     3 (average)
   481                           ; direct_byte           11     8 (fixed)
   482                           ; jumptable            260     6 (fixed)
   483                           ;	Chosen strategy is simple_byte
   484  07B5  0877               	movf	main@duty+1,w
   485  07B6  3A00               	xorlw	0	; case 0
   486  07B7  1903               	skipnz
   487  07B8  2FBA               	goto	l782
   488  07B9  2F34               	goto	l556
   489  07BA                     l782:	
   490                           
   491                           ; Switch size 1, requested type "space"
   492                           ; Number of cases is 5, Range of values is 1 to 5
   493                           ; switch strategies available:
   494                           ; Name         Instructions Cycles
   495                           ; simple_byte           16     9 (average)
   496                           ; direct_byte           26    11 (fixed)
   497                           ; jumptable            263     9 (fixed)
   498                           ;	Chosen strategy is simple_byte
   499  07BA  0876               	movf	main@duty,w
   500  07BB  3A01               	xorlw	1	; case 1
   501  07BC  1903               	skipnz
   502  07BD  2FAB               	goto	l602
   503  07BE  3A03               	xorlw	3	; case 2
   504  07BF  1903               	skipnz
   505  07C0  2FAD               	goto	l604
   506  07C1  3A01               	xorlw	1	; case 3
   507  07C2  1903               	skipnz
   508  07C3  2FAF               	goto	l606
   509  07C4  3A07               	xorlw	7	; case 4
   510  07C5  1903               	skipnz
   511  07C6  2FB1               	goto	l608
   512  07C7  3A01               	xorlw	1	; case 5
   513  07C8  1903               	skipnz
   514  07C9  2FB3               	goto	l610
   515  07CA  2F34               	goto	l556
   516                           
   517                           ;LE4-7.c: 70: }
   518  07CB  2F34               	goto	l556
   519  07CC                     l616:	
   520                           
   521                           ;LE4-7.c: 71: else if (freq == 3) {
   522  07CC  3003               	movlw	3
   523  07CD  0678               	xorwf	main@freq,w
   524  07CE  0479               	iorwf	main@freq+1,w
   525  07CF  1903               	btfsc	3,2
   526  07D0  2FE5               	goto	l632
   527  07D1  2F34               	goto	l556
   528  07D2                     l620:	
   529                           ;LE4-7.c: 73: case 1: CCPR1L = 0x6; CCP1CON = 0x1C; break;
   530                           
   531                           ;LE4-7.c: 72: switch(duty) {
   532                           
   533  07D2  3006               	movlw	6
   534  07D3  2FD9               	goto	L21
   535  07D4                     l622:	
   536                           ;LE4-7.c: 74: case 2: CCPR1L = 0xF; CCP1CON = 0x3C; break;
   537                           
   538  07D4  300F               	movlw	15
   539  07D5                     L20:	
   540  07D5  0095               	movwf	21	;volatile
   541  07D6  303C               	movlw	60
   542  07D7  2FE3               	goto	L16
   543  07D8                     l624:	
   544                           ;LE4-7.c: 75: case 3: CCPR1L = 0x1F; CCP1CON = 0x1C; break;
   545                           
   546  07D8  301F               	movlw	31
   547  07D9                     L21:	
   548  07D9  0095               	movwf	21	;volatile
   549  07DA  301C               	movlw	28
   550  07DB  2FE3               	goto	L16
   551  07DC                     l626:	
   552                           ;LE4-7.c: 76: case 4: CCPR1L = 0x2F; CCP1CON = 0x0C; break;
   553                           
   554  07DC  302F               	movlw	47
   555  07DD                     L23:	
   556  07DD  0095               	movwf	21	;volatile
   557  07DE  300C               	movlw	12
   558  07DF  2FE3               	goto	L16
   559  07E0                     l628:	
   560                           ;LE4-7.c: 77: case 5: CCPR1L = 0x3B; CCP1CON = 0x2C; break;
   561                           
   562  07E0  303B               	movlw	59
   563  07E1                     L18:	
   564  07E1  0095               	movwf	21	;volatile
   565  07E2  302C               	movlw	44
   566  07E3                     L16:	
   567  07E3  0097               	movwf	23	;volatile
   568                           
   569                           ;LE4-7.c: 78: }
   570  07E4  2F34               	goto	l556
   571  07E5                     l632:	
   572                           
   573                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   574                           ; Switch size 1, requested type "space"
   575                           ; Number of cases is 1, Range of values is 0 to 0
   576                           ; switch strategies available:
   577                           ; Name         Instructions Cycles
   578                           ; simple_byte            4     3 (average)
   579                           ; direct_byte           11     8 (fixed)
   580                           ; jumptable            260     6 (fixed)
   581                           ;	Chosen strategy is simple_byte
   582  07E5  0877               	movf	main@duty+1,w
   583  07E6  3A00               	xorlw	0	; case 0
   584  07E7  1903               	skipnz
   585  07E8  2FEA               	goto	l784
   586  07E9  2F34               	goto	l556
   587  07EA                     l784:	
   588                           
   589                           ; Switch size 1, requested type "space"
   590                           ; Number of cases is 5, Range of values is 1 to 5
   591                           ; switch strategies available:
   592                           ; Name         Instructions Cycles
   593                           ; simple_byte           16     9 (average)
   594                           ; direct_byte           26    11 (fixed)
   595                           ; jumptable            263     9 (fixed)
   596                           ;	Chosen strategy is simple_byte
   597  07EA  0876               	movf	main@duty,w
   598  07EB  3A01               	xorlw	1	; case 1
   599  07EC  1903               	skipnz
   600  07ED  2FD2               	goto	l620
   601  07EE  3A03               	xorlw	3	; case 2
   602  07EF  1903               	skipnz
   603  07F0  2FD4               	goto	l622
   604  07F1  3A01               	xorlw	1	; case 3
   605  07F2  1903               	skipnz
   606  07F3  2FD8               	goto	l624
   607  07F4  3A07               	xorlw	7	; case 4
   608  07F5  1903               	skipnz
   609  07F6  2FDC               	goto	l626
   610  07F7  3A01               	xorlw	1	; case 5
   611  07F8  1903               	skipnz
   612  07F9  2FE0               	goto	l628
   613  07FA  2F34               	goto	l556
   614                           
   615                           ;LE4-7.c: 79: }
   616                           ;LE4-7.c: 80: }
   617                           ;LE4-7.c: 81: }
   618  07FB  2F34               	goto	l556
   619  07FC                     __end_of_main:	
   620                           
   621                           	psect	text1
   622  06E9                     __ptext1:	
   623 ;; *************** function _delay *****************
   624 ;; Defined at:
   625 ;;		line 13 in file "D:\JinBus\CpE 3201\Practical Activity #4\CpE 3201-LE4-7\LE4-7.c"
   626 ;; Parameters:    Size  Location     Type
   627 ;;  cnt             2    0[COMMON] int 
   628 ;; Auto vars:     Size  Location     Type
   629 ;;  j               2    4[COMMON] int 
   630 ;;  i               2    2[COMMON] int 
   631 ;; Return value:  Size  Location     Type
   632 ;;		None               void
   633 ;; Registers used:
   634 ;;		wreg, status,2, status,0, btemp+1
   635 ;; Tracked objects:
   636 ;;		On entry : 0/0
   637 ;;		On exit  : 0/0
   638 ;;		Unchanged: 0/0
   639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   640 ;;      Params:         2       0       0       0       0
   641 ;;      Locals:         4       0       0       0       0
   642 ;;      Temps:          0       0       0       0       0
   643 ;;      Totals:         6       0       0       0       0
   644 ;;Total ram usage:        6 bytes
   645 ;; Hardware stack levels used:    1
   646 ;; This function calls:
   647 ;;		Nothing
   648 ;; This function is called by:
   649 ;;		_main
   650 ;; This function uses a non-reentrant model
   651 ;;
   652                           
   653                           
   654                           ;psect for function _delay
   655  06E9                     _delay:	
   656                           
   657                           ;LE4-7.c: 14: int i, j;
   658                           ;LE4-7.c: 15: for (i=cnt; i!=0; i--) {
   659                           
   660                           ;incstack = 0
   661                           ; Regs used in _delay: [wreg+status,2+status,0+btemp+1]
   662  06E9  0871               	movf	delay@cnt+1,w
   663  06EA  01F3               	clrf	delay@i+1
   664  06EB  07F3               	addwf	delay@i+1,f
   665  06EC  0870               	movf	delay@cnt,w
   666  06ED  01F2               	clrf	delay@i
   667  06EE  07F2               	addwf	delay@i,f
   668  06EF                     L24:	
   669  06EF  0873               	movf	delay@i+1,w
   670  06F0  0472               	iorwf	delay@i,w
   671  06F1  1903               	btfsc	3,2
   672  06F2  0008               	return
   673                           
   674                           ;LE4-7.c: 16: for (j=0; j<1000; j++);
   675  06F3  01F4               	clrf	delay@j
   676  06F4  01F5               	clrf	delay@j+1
   677  06F5  0875               	movf	delay@j+1,w
   678  06F6  3A80               	xorlw	128
   679  06F7  00FF               	movwf	127
   680  06F8  3083               	movlw	131
   681  06F9  027F               	subwf	127,w
   682  06FA  1D03               	skipz
   683  06FB  2EFE               	goto	u25
   684  06FC  30E8               	movlw	232
   685  06FD  0274               	subwf	delay@j,w
   686  06FE                     u25:	
   687  06FE  1803               	btfsc	3,0
   688  06FF  2F11               	goto	l540
   689  0700                     l536:	
   690  0700  3001               	movlw	1
   691  0701  07F4               	addwf	delay@j,f
   692  0702  1803               	skipnc
   693  0703  0AF5               	incf	delay@j+1,f
   694  0704  3000               	movlw	0
   695  0705  07F5               	addwf	delay@j+1,f
   696  0706  0875               	movf	delay@j+1,w
   697  0707  3A80               	xorlw	128
   698  0708  00FF               	movwf	127
   699  0709  3083               	movlw	131
   700  070A  027F               	subwf	127,w
   701  070B  1D03               	skipz
   702  070C  2F0F               	goto	u35
   703  070D  30E8               	movlw	232
   704  070E  0274               	subwf	delay@j,w
   705  070F                     u35:	
   706  070F  1C03               	skipc
   707  0710  2F00               	goto	l536
   708  0711                     l540:	
   709  0711  30FF               	movlw	255
   710  0712  07F2               	addwf	delay@i,f
   711  0713  1803               	skipnc
   712  0714  0AF3               	incf	delay@i+1,f
   713  0715  30FF               	movlw	255
   714  0716  07F3               	addwf	delay@i+1,f
   715  0717  2EEF               	goto	L24
   716  0718                     __end_of_delay:	
   717  007E                     btemp	set	126	;btemp
   718  007E                     wtemp	set	126
   719  007E                     wtemp0	set	126
   720  0080                     wtemp1	set	128
   721  0082                     wtemp2	set	130
   722  0084                     wtemp3	set	132
   723  0086                     wtemp4	set	134
   724  0088                     wtemp5	set	136
   725  007F                     wtemp6	set	127
   726  007E                     ttemp	set	126
   727  007E                     ttemp0	set	126
   728  0081                     ttemp1	set	129
   729  0084                     ttemp2	set	132
   730  0087                     ttemp3	set	135
   731  007F                     ttemp4	set	127
   732  007E                     ltemp	set	126
   733  007E                     ltemp0	set	126
   734  0082                     ltemp1	set	130
   735  0086                     ltemp2	set	134
   736  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     253
                                              6 COMMON     4     4      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _delay                                                6     4      2     118
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Mar 08 00:02:24 2023

            __CFG_CP$OFF 0000                       l29 076B                       l39 077E  
                     u25 06FE                       u35 070F                      l610 07B3  
                    l602 07AB                      l540 0711                      l620 07D2  
                    l604 07AD                      l622 07D4                      l606 07AF  
                    l614 07B5                      l536 0700                      l624 07D8  
                    l632 07E5                      l608 07B1                      l616 07CC  
                    l626 07DC                      l570 0756                      l628 07E0  
                    l580 0778                      l564 074B                      l556 0734  
                    l590 078A                      l566 0752                      l574 075B  
                    l592 078C                      l584 0784                      l568 0754  
                    l586 0786                      l780 0793                      l588 0788  
                    l596 078E                      l782 07BA                      l598 07A5  
                    l784 07EA                      l778 0760                      _RB1 0031  
                    _RB2 0032                      _RC2 003A                      _PR2 0092  
           __CFG_CPD$OFF 0000             __CFG_FOSC$XT 0000             __CFG_LVP$OFF 0000  
           __CFG_WRT$OFF 0000                     _main 0718                     btemp 007E  
          __CFG_BOREN$ON 0000                     ltemp 007E                     start 0000  
                   ttemp 007E                     wtemp 007E                    ?_main 0070  
          __CFG_WDTE$OFF 0000                    _T2CON 0012                    _TRISB 0086  
                  _TRISC 0087            __CFG_PWRTE$ON 0000                    _delay 06E9  
                  ltemp0 007E                    ltemp1 0082                    ltemp2 0086  
                  ltemp3 0080                    ttemp0 007E                    ttemp1 0081  
                  ttemp2 0084                    ttemp3 0087                    ttemp4 007F  
                  status 0003                    wtemp0 007E                    wtemp1 0080  
                  wtemp2 0082                    wtemp3 0084                    wtemp4 0086  
                  wtemp5 0088                    wtemp6 007F          __initialization 07FC  
           __end_of_main 07FC                   ??_main 0076                   ?_delay 0070  
                 _CCPR1L 0015                   delay@i 0072                   delay@j 0074  
__end_of__initialization 07FC           __pcstackCOMMON 0070            __end_of_delay 0718  
                ??_delay 0072               __pmaintext 0718                  _CCP1CON 0017  
                __ptext0 0000                  __ptext1 06E9     end_of_initialization 07FC  
    start_initialization 07FC                ___latbits 0002           __size_of_delay 002F  
          __size_of_main 00E4                 delay@cnt 0070                 main@freq 0078  
               main@duty 0076  
